0. For the patients I manually marked, find onset channel and get a sense of how focal the onsets are by running something like:
python plot_manual_onset_times.py NA

It creates pdfs of the relative szr onsets at all channels.

Indicate onset channel in chans_of_interest.csv


1. Move the EEG data to /Users/davidgroppe/ONGOING/TWH_EEG
mat files go in EEG_MAT, text files of data in EEG_TXT
channel info simply goes in the subject’s root directory


2. Create chan label csv file via: create_chan_label_csv_file.ipynb


3. Create csv files of clinician onsets via:
*/Users/davidgroppe/Dropbox/TWH_INFO/CLINICIAN_ONSET_TIMES/create_skeleton_onset.ipynb: Makes a draft of a clinician onset csv file based on raw data text files
*manually enter seizure onsets and offsets from Sumayya’s spreadsheet:
*Run onset_time2tpts.ipynb to add additional columns (e.g., when the onset is)

4. Fill out DG_ONSET_CHAN column of the CSV file created in step 3 with a guess as to what the onset channel is. You can edit these after plotting spectrograms in Step 5.

5. Plot clinician onsets to make sure they concur with onset in the target channel by running something like:
plot_onsets_on_sgrams.py NA

Fill out the column USE4CLASSIFIER with “use” if the data are usable. If not, provide the reason (e.g., noEEGdata, clinicianOnsetTooEarly)

6. Compute features with compute_*_ftrs*.py. *_lag.py means that the code extracts features by averaging over multiple time points of the 0 lag code (e.g., a 3 sec moving avg).


*. Target stimulation window is 4 seconds before clinician onset until 9 seconds after clinician onset. Note that due to rounding, exact timing of clinician onset is +/- 2 seconds.


***TRAINING****
train_rand_smart_srch.py: Randomly chooses gamma values and then intelligently adjusts C-value to find good parameters. The best ensemble of models is saved, so in theory you don’t need to run train_ensemble.py.

train_ensemble.py: Creates an ensemble of classifiers using LOOCV (e.g, 8 patients produces 8 classifiers) using prespecified hyper parameters



***TESTING****
apply_saved_models.py: applies the ensemble of classifiers produced by train_ensemble.py to held out data (DOUBLE CHECK THIS??)

***MISC****
count_data.py: This script simply counts the amount of data and outputs summary statistics to the command line



